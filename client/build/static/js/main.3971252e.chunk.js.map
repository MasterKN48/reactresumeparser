{"version":3,"sources":["store.js","component/Home.js","App.js","serviceWorker.js","index.js"],"names":["initialState","loading","prased","store","createContext","Provider","StateProvider","children","useReducer","state","type","payload","parsed","dispatch","value","FileUpload","lazy","ShowResume","Home","Container","fixed","fallback","className","align","CircularProgress","color","NotFound","Typography","gutterBottom","variant","to","Button","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.3971252e.chunk.js","sourcesContent":["import React, { createContext, useReducer } from \"react\";\n\nconst initialState = { loading: null, prased: null };\nconst store = createContext(initialState);\nconst { Provider } = store;\n\nconst StateProvider = ({ children }) => {\n  const [state, dispatch] = useReducer((state, { type, payload }) => {\n    switch (type) {\n      case \"START_PARSING\":\n        return {\n          ...state,\n          loading: true,\n          parsed: null,\n        };\n      case \"RESUME_PARSED\":\n        return {\n          ...state,\n          parsed: payload,\n          loading: false,\n        };\n      default:\n        return state;\n    }\n  }, initialState);\n\n  return <Provider value={{ state, dispatch }}>{children}</Provider>;\n};\n\nexport { store, StateProvider };\n","import React, { lazy, Suspense } from \"react\";\nimport { Container, CircularProgress } from \"@material-ui/core\";\n\nconst FileUpload = lazy(() => import(\"./FileUpload\"));\nconst ShowResume = lazy(() => import(\"./ShowResume\"));\nconst Home = () => {\n  return (\n    <Container fixed>\n      <Suspense\n        fallback={\n          <Container className=\"my-5\" align=\"center\">\n            <CircularProgress color=\"primary\" />\n          </Container>\n        }\n      >\n        <FileUpload />\n        <ShowResume />\n      </Suspense>\n    </Container>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { Switch, Route, BrowserRouter, Link } from \"react-router-dom\";\nimport Home from \"./component/Home\";\nimport { Container, Typography, Button } from \"@material-ui/core\";\nimport { StateProvider } from \"./store.js\";\n\nconst NotFound = () => (\n  <Container align=\"center\" className=\"my-5\">\n    <Typography gutterBottom variant=\"h1\">\n      404\n    </Typography>\n    <Typography gutterBottom variant=\"h4\">\n      This page does not exist.\n    </Typography>\n    <Link className=\"text-decoration-none\" to=\"/\">\n      <Button color=\"primary\" variant=\"outlined\">\n        Home\n      </Button>\n    </Link>\n  </Container>\n);\n\nconst App = () => {\n  return (\n    <StateProvider>\n      <BrowserRouter>\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route component={NotFound} />\n        </Switch>\n      </BrowserRouter>\n    </StateProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n"],"sourceRoot":""}